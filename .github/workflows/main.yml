# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Build gitsqlite

on:
  push:
  
jobs:
  build:
    defaults:
      run:
        shell: pwsh
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: false

    - name: Build
      run: ./scripts/build.ps1
    
    - name: Upload binary Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gitsqlite-binaries
        path: bin/**/*
        retention-days: 5

  test-ubuntu:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: gitsqlite-binaries
        path: bin
    
    - name: Make Linux binary executable
      run: chmod +x bin/gitsqlite-linux-amd64
    
    - name: Install SQLite3 if needed
      run: |
        if ! command -v sqlite3 &> /dev/null; then
          echo "SQLite3 not found, installing..."
          sudo apt-get update && sudo apt-get install -y sqlite3
        else
          echo "SQLite3 is already available: $(which sqlite3)"
          sqlite3 --version
        fi
    
    - name: Run integrated smoketest
      run: |
        # Create a sqlite database with a table and some data
        sqlite3 smoketest.db <<EOF
        CREATE TABLE test (id INTEGER PRIMARY KEY, name TEXT);
        INSERT INTO test (name) VALUES ('Alice'), ('Bob'), ('Charlie');
        EOF
        
        # Verify the database and table creation
        echo "Database contents:"
        sqlite3 smoketest.db <<EOF
        SELECT name FROM test;
        EOF
        
        # Check if database was created successfully
        if [ ! -f smoketest.db ]; then
            echo "FAILED: smoketest.db was not created"
            exit 1
        fi
        
        db_size=$(stat -c%s smoketest.db)
        echo "Database file size: $db_size bytes"
        
        if [ "$db_size" -eq 0 ]; then
            echo "FAILED: smoketest.db is empty"
            exit 1
        fi
        
        echo "Step 1: Database -> SQL (clean)"
        ./bin/gitsqlite-linux-amd64 clean < smoketest.db > smoketest_output1.sql
        
        echo "Step 2: SQL -> Database (smudge)"
        ./bin/gitsqlite-linux-amd64 smudge < smoketest_output1.sql > smoketest_output2.db
        
        echo "Step 3: Database -> SQL (clean again)"
        ./bin/gitsqlite-linux-amd64 clean < smoketest_output2.db > smoketest_output2.sql
        
        echo "Step 4: Comparing SQL outputs"
        
        # Get file sizes
        size1=$(stat -c%s smoketest_output1.sql)
        size2=$(stat -c%s smoketest_output2.sql)
        
        echo "File sizes:"
        echo "  smoketest_output1.sql: $size1 bytes"
        echo "  smoketest_output2.sql: $size2 bytes"
        
        # Check if files exist and have the same size
        if [ ! -f smoketest_output1.sql ] || [ ! -f smoketest_output2.sql ]; then
            echo "FAILED: One or both output files missing"
            exit 1
        elif [ "$size1" -eq 0 ] || [ "$size2" -eq 0 ]; then
            echo "FAILED: One or both output files are empty (0 bytes)"
            exit 1
        elif [ "$size1" != "$size2" ]; then
            echo "FAILED: File sizes differ by $((size2 - size1)) bytes"
            exit 1
        elif diff smoketest_output1.sql smoketest_output2.sql > /dev/null; then
            echo "SUCCESS: Round-trip test passed - files are identical (same size and content)"
        else
            echo "FAILED: Round-trip test failed - files same size but content differs"
            diff smoketest_output1.sql smoketest_output2.sql
            exit 1
        fi
        
        # Cleanup
        echo "Cleaning up..."
        rm -f smoketest.db smoketest_output1.sql smoketest_output2.db smoketest_output2.sql

  test-ubuntu-arm:
    needs: build
    runs-on: ubuntu-24.04-arm
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: gitsqlite-binaries
        path: bin
    
    - name: Make Linux ARM64 binary executable
      run: chmod +x bin/gitsqlite-linux-arm64
    
    - name: Install SQLite3 if needed
      run: |
        if ! command -v sqlite3 &> /dev/null; then
          echo "SQLite3 not found, installing..."
          sudo apt-get update && sudo apt-get install -y sqlite3
        else
          echo "SQLite3 is already available: $(which sqlite3)"
          sqlite3 --version
        fi
    
    - name: Run integrated smoketest on ARM64
      run: |
        # Create a sqlite database with a table and some data
        sqlite3 smoketest.db <<EOF
        CREATE TABLE test (id INTEGER PRIMARY KEY, name TEXT);
        INSERT INTO test (name) VALUES ('Alice'), ('Bob'), ('Charlie');
        EOF
        
        # Verify the database and table creation
        echo "Database contents:"
        sqlite3 smoketest.db <<EOF
        SELECT name FROM test;
        EOF
        
        # Check if database was created successfully
        if [ ! -f smoketest.db ]; then
            echo "FAILED: smoketest.db was not created"
            exit 1
        fi
        
        db_size=$(stat -c%s smoketest.db)
        echo "Database file size: $db_size bytes"
        
        if [ "$db_size" -eq 0 ]; then
            echo "FAILED: smoketest.db is empty"
            exit 1
        fi
        
        echo "Step 1: Database -> SQL (clean)"
        ./bin/gitsqlite-linux-arm64 clean < smoketest.db > smoketest_output1.sql
        
        echo "Step 2: SQL -> Database (smudge)"
        ./bin/gitsqlite-linux-arm64 smudge < smoketest_output1.sql > smoketest_output2.db
        
        echo "Step 3: Database -> SQL (clean again)"
        ./bin/gitsqlite-linux-arm64 clean < smoketest_output2.db > smoketest_output2.sql
        
        echo "Step 4: Comparing SQL outputs"
        
        # Get file sizes
        size1=$(stat -c%s smoketest_output1.sql)
        size2=$(stat -c%s smoketest_output2.sql)
        
        echo "File sizes:"
        echo "  smoketest_output1.sql: $size1 bytes"
        echo "  smoketest_output2.sql: $size2 bytes"
        
        # Check if files exist and have the same size
        if [ ! -f smoketest_output1.sql ] || [ ! -f smoketest_output2.sql ]; then
            echo "FAILED: One or both output files missing"
            exit 1
        elif [ "$size1" -eq 0 ] || [ "$size2" -eq 0 ]; then
            echo "FAILED: One or both output files are empty (0 bytes)"
            exit 1
        elif [ "$size1" != "$size2" ]; then
            echo "FAILED: File sizes differ by $((size2 - size1)) bytes"
            exit 1
        elif diff smoketest_output1.sql smoketest_output2.sql > /dev/null; then
            echo "SUCCESS: Round-trip test passed - files are identical (same size and content)"
        else
            echo "FAILED: Round-trip test failed - files same size but content differs"
            diff smoketest_output1.sql smoketest_output2.sql
            exit 1
        fi
        
        # Cleanup
        echo "Cleaning up..."
        rm -f smoketest.db smoketest_output1.sql smoketest_output2.db smoketest_output2.sql
