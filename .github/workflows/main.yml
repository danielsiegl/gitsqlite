# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Build gitsqlite

on:
  push:
  
jobs:
  build:
    defaults:
      run:
        shell: pwsh
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: false

    - name: Build
      run: ./scripts/build.ps1
    
    - name: Upload binary Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gitsqlite-binaries
        path: bin/**/*
        retention-days: 5

  test-ubuntu-amd64:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: gitsqlite-binaries
        path: bin
    
    - name: Make Linux binary executable
      run: chmod +x bin/gitsqlite-linux-amd64
    
    - name: Install SQLite3 if needed
      run: |
        if ! command -v sqlite3 &> /dev/null; then
          echo "SQLite3 not found, installing..."
          sudo apt-get update && sudo apt-get install -y sqlite3
        else
          echo "SQLite3 is already available: $(which sqlite3)"
          sqlite3 --version
        fi
    
    - name: Create test database
      shell: pwsh
      run: ./scripts/createtestdatabase.ps1
    
    - name: Run integrated smoketest
      run: |
        echo "Step 1: Database -> SQL (clean)"
        ./bin/gitsqlite-linux-amd64 clean < smoketest.db > smoketest_output1.sql
        
        echo "Step 2: SQL -> Database (smudge)"
        ./bin/gitsqlite-linux-amd64 smudge < smoketest_output1.sql > smoketest_output2.db
        
        echo "Step 3: Database -> SQL (clean again)"
        ./bin/gitsqlite-linux-amd64 clean < smoketest_output2.db > smoketest_output2.sql
    
    - name: Evaluate test results
      shell: pwsh
      run: ./scripts/evaluatetest.ps1 -Cleanup

  test-ubuntu-arm64:
    needs: build
    runs-on: ubuntu-24.04-arm
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: gitsqlite-binaries
        path: bin
    
    - name: Make Linux ARM64 binary executable
      run: chmod +x bin/gitsqlite-linux-arm64
    
    - name: Install SQLite3 if needed
      run: |
        if ! command -v sqlite3 &> /dev/null; then
          echo "SQLite3 not found, installing..."
          sudo apt-get update && sudo apt-get install -y sqlite3
        else
          echo "SQLite3 is already available: $(which sqlite3)"
          sqlite3 --version
        fi
    
    - name: Create test database
      shell: pwsh
      run: ./scripts/createtestdatabase.ps1
    
    - name: Run integrated smoketest on ARM64
      run: |
        echo "Step 1: Database -> SQL (clean)"
        ./bin/gitsqlite-linux-arm64 clean < smoketest.db > smoketest_output1.sql
        
        echo "Step 2: SQL -> Database (smudge)"
        ./bin/gitsqlite-linux-arm64 smudge < smoketest_output1.sql > smoketest_output2.db
        
        echo "Step 3: Database -> SQL (clean again)"
        ./bin/gitsqlite-linux-arm64 clean < smoketest_output2.db > smoketest_output2.sql
    
    - name: Evaluate test results
      shell: pwsh
      run: ./scripts/evaluatetest.ps1 -Cleanup

  test-macos-arm64:
    needs: build
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: gitsqlite-binaries
        path: bin
    
    - name: Make macOS binary executable
      run: chmod +x bin/gitsqlite-macos-arm64
    
    - name: Install SQLite3 if needed
      run: |
        if ! command -v sqlite3 &> /dev/null; then
          echo "SQLite3 not found, installing..."
          brew install sqlite
        else
          echo "SQLite3 is already available: $(which sqlite3)"
          sqlite3 --version
        fi
    
    - name: Create test database
      shell: pwsh
      run: ./scripts/createtestdatabase.ps1
    
    - name: Run integrated smoketest on macOS
      run: |
        echo "Step 1: Database -> SQL (clean)"
        ./bin/gitsqlite-macos-arm64 clean < smoketest.db > smoketest_output1.sql
        
        echo "Step 2: SQL -> Database (smudge)"
        ./bin/gitsqlite-macos-arm64 smudge < smoketest_output1.sql > smoketest_output2.db
        
        echo "Step 3: Database -> SQL (clean again)"
        ./bin/gitsqlite-macos-arm64 clean < smoketest_output2.db > smoketest_output2.sql
    
    - name: Evaluate test results
      shell: pwsh
      run: ./scripts/evaluatetest.ps1 -Cleanup

  test-windows-amd64:
    needs: build
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: gitsqlite-binaries
        path: bin
    
    - name: Check SQLite3 availability
      shell: pwsh
      run: |
        Write-Host "Checking sqlite3.exe..."
        $sqlite = Get-Command sqlite3.exe -ErrorAction SilentlyContinue
        if (-not $sqlite) {
          choco install sqlite -y
          # path propagation can lag; invoke via absolute path to be safe
          $exe = 'C:\ProgramData\chocolatey\bin\sqlite3.exe'
          & $exe --version
        } else {
          & sqlite3.exe --version
        }
    
    - name: Create test database
      shell: pwsh
      run: ./scripts/createtestdatabase.ps1
    
    - name: Run integrated smoketest on Windows
      shell: pwsh
      run: |
        Write-Host "Step 1: Database -> SQL (clean)"
        $bytes1 = [System.IO.File]::ReadAllBytes("smoketest.db")
        $proc1 = Start-Process -FilePath "bin\gitsqlite-windows-amd64.exe" -ArgumentList "clean" -NoNewWindow -PassThru -RedirectStandardInput -RedirectStandardOutput -RedirectStandardError
        $proc1.StandardInput.BaseStream.Write($bytes1, 0, $bytes1.Length)
        $proc1.StandardInput.Close()
        $output1 = $proc1.StandardOutput.ReadToEnd()
        $proc1.WaitForExit()
        if ($proc1.ExitCode -ne 0) { throw "Step 1 failed with exit code $($proc1.ExitCode)" }
        [System.IO.File]::WriteAllText("smoketest_output1.sql", $output1, [System.Text.UTF8Encoding]::new($false))
        
        Write-Host "Step 2: SQL -> Database (smudge)"
        $text2 = [System.IO.File]::ReadAllText("smoketest_output1.sql", [System.Text.UTF8Encoding]::new($false))
        $proc2 = Start-Process -FilePath "bin\gitsqlite-windows-amd64.exe" -ArgumentList "smudge" -NoNewWindow -PassThru -RedirectStandardInput -RedirectStandardOutput -RedirectStandardError
        $proc2.StandardInput.Write($text2)
        $proc2.StandardInput.Close()
        $output2 = $proc2.StandardOutput.BaseStream
        $buffer = New-Object byte[] 4096
        $ms = New-Object System.IO.MemoryStream
        while (($read = $output2.Read($buffer, 0, $buffer.Length)) -gt 0) { $ms.Write($buffer, 0, $read) }
        $proc2.WaitForExit()
        if ($proc2.ExitCode -ne 0) { throw "Step 2 failed with exit code $($proc2.ExitCode)" }
        [System.IO.File]::WriteAllBytes("smoketest_output2.db", $ms.ToArray())
        
        Write-Host "Step 3: Database -> SQL (clean again)"
        $bytes3 = [System.IO.File]::ReadAllBytes("smoketest_output2.db")
        $proc3 = Start-Process -FilePath "bin\gitsqlite-windows-amd64.exe" -ArgumentList "clean" -NoNewWindow -PassThru -RedirectStandardInput -RedirectStandardOutput -RedirectStandardError
        $proc3.StandardInput.BaseStream.Write($bytes3, 0, $bytes3.Length)
        $proc3.StandardInput.Close()
        $output3 = $proc3.StandardOutput.ReadToEnd()
        $proc3.WaitForExit()
        if ($proc3.ExitCode -ne 0) { throw "Step 3 failed with exit code $($proc3.ExitCode)" }
        [System.IO.File]::WriteAllText("smoketest_output2.sql", $output3, [System.Text.UTF8Encoding]::new($false))
    
    - name: Evaluate test results
      shell: pwsh
      run: ./scripts/evaluatetest.ps1 -Cleanup
    

