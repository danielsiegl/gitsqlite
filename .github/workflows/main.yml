# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Build gitsqlite

on:
  push:
  
jobs:
  create-smoketest-db:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Download binaries
      uses: actions/download-artifact@v4
      with:
        name: gitsqlite-binaries
        path: bin
    - name: Install SQLite3 if needed
      run: |
        if ! command -v sqlite3 &> /dev/null; then
          echo "SQLite3 not found, installing..."
          sudo apt-get update && sudo apt-get install -y sqlite3
        else
          echo "SQLite3 is already available: $(which sqlite3)"
          sqlite3 --version
        fi
    - name: Create smoketest database
      shell: pwsh
      run: ./scripts/createtestdatabase.ps1
    - name: Upload smoketest database
      uses: actions/upload-artifact@v4
      with:
        name: smoketest-db
        path: smoketest.db
        retention-days: 5
  build:
    defaults:
      run:
        shell: pwsh
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: false

    - name: Build
      run: ./scripts/build.ps1
    
    - name: Upload binary Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gitsqlite-binaries
        path: bin/**/*
        retention-days: 5

  test-ubuntu-amd64:
    needs: [build, create-smoketest-db]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: gitsqlite-binaries
        path: bin
    
    - name: Make Linux binary executable
      run: chmod +x bin/gitsqlite-linux-amd64
    
    - name: Install SQLite3 if needed
      run: |
        if ! command -v sqlite3 &> /dev/null; then
          echo "SQLite3 not found, installing..."
          sudo apt-get update && sudo apt-get install -y sqlite3
        else
          echo "SQLite3 is already available: $(which sqlite3)"
          sqlite3 --version
        fi
    
    - name: Download smoketest database
      uses: actions/download-artifact@v4
      with:
        name: smoketest-db
        path: .
    
    - name: Run integrated smoketest
      run: |
        echo "Step 1: Database -> SQL (clean)"
        ./bin/gitsqlite-linux-amd64 clean < smoketest.db > smoketest_output1.sql
        
        echo "Step 2: SQL -> Database (smudge)"
        ./bin/gitsqlite-linux-amd64 smudge < smoketest_output1.sql > smoketest_output2.db
        
        echo "Step 3: Database -> SQL (clean again)"
        ./bin/gitsqlite-linux-amd64 clean < smoketest_output2.db > smoketest_output2.sql
    
    - name: Evaluate test results
      shell: pwsh
      run: ./scripts/evaluatetest.ps1

    - name: Upload SQL Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sql-artifacts-ubuntu-amd64
        path: '*.sql'
        retention-days: 5

  test-ubuntu-arm64:
    needs: [build, create-smoketest-db]
    runs-on: ubuntu-24.04-arm
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: gitsqlite-binaries
        path: bin
    
    - name: Make Linux ARM64 binary executable
      run: chmod +x bin/gitsqlite-linux-arm64
    
    - name: Install SQLite3 if needed
      run: |
        if ! command -v sqlite3 &> /dev/null; then
          echo "SQLite3 not found, installing..."
          sudo apt-get update && sudo apt-get install -y sqlite3
        else
          echo "SQLite3 is already available: $(which sqlite3)"
          sqlite3 --version
        fi
    
    - name: Download smoketest database
      uses: actions/download-artifact@v4
      with:
        name: smoketest-db
        path: .
    
    - name: Run integrated smoketest on ARM64
      run: |
        echo "Step 1: Database -> SQL (clean)"
        ./bin/gitsqlite-linux-arm64 clean < smoketest.db > smoketest_output1.sql
        
        echo "Step 2: SQL -> Database (smudge)"
        ./bin/gitsqlite-linux-arm64 smudge < smoketest_output1.sql > smoketest_output2.db
        
        echo "Step 3: Database -> SQL (clean again)"
        ./bin/gitsqlite-linux-arm64 clean < smoketest_output2.db > smoketest_output2.sql
    
    - name: Evaluate test results
      shell: pwsh
      run: ./scripts/evaluatetest.ps1

    - name: Upload SQL Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sql-artifacts-ubuntu-arm64
        path: '*.sql'
        retention-days: 5

  test-macos-arm64:
    needs: [build, create-smoketest-db]
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: gitsqlite-binaries
        path: bin
    
    - name: Make macOS binary executable
      run: chmod +x bin/gitsqlite-macos-arm64
    
    - name: Install SQLite3 if needed
      run: |
        if ! command -v sqlite3 &> /dev/null; then
          echo "SQLite3 not found, installing..."
          brew install sqlite
        else
          echo "SQLite3 is already available: $(which sqlite3)"
          sqlite3 --version
        fi
    
    - name: Download smoketest database
      uses: actions/download-artifact@v4
      with:
        name: smoketest-db
        path: .
    
    - name: Run integrated smoketest on macOS
      run: |
        echo "Step 1: Database -> SQL (clean)"
        ./bin/gitsqlite-macos-arm64 clean < smoketest.db > smoketest_output1.sql
        
        echo "Step 2: SQL -> Database (smudge)"
        ./bin/gitsqlite-macos-arm64 smudge < smoketest_output1.sql > smoketest_output2.db
        
        echo "Step 3: Database -> SQL (clean again)"
        ./bin/gitsqlite-macos-arm64 clean < smoketest_output2.db > smoketest_output2.sql
    
    - name: Evaluate test results
      shell: pwsh
      run: ./scripts/evaluatetest.ps1

    - name: Upload SQL Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sql-artifacts-macos-arm64
        path: '*.sql'
        retention-days: 5


  test-windows-amd64:
    needs: [build, create-smoketest-db]
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: gitsqlite-binaries
        path: bin
    
    - name: Check SQLite3 availability
      shell: pwsh
      run: |
        Write-Host "Checking sqlite3.exe..."
        $sqlite = Get-Command sqlite3.exe -ErrorAction SilentlyContinue
        if (-not $sqlite) {
          choco install sqlite -y
          # path propagation can lag; invoke via absolute path to be safe
          $exe = 'C:\ProgramData\chocolatey\bin\sqlite3.exe'
          & $exe --version
        } else {
          & sqlite3.exe --version
        }
    
    - name: Download smoketest database
      uses: actions/download-artifact@v4
      with:
        name: smoketest-db
        path: .
    
    - name: Run integrated smoketest on Windows
      shell: cmd
      run: |
        REM Step 1: Database -> SQL (clean)
        bin\gitsqlite-windows-amd64.exe clean < smoketest.db > smoketest_output1.sql

        REM Step 2: SQL -> Database (smudge)
        bin\gitsqlite-windows-amd64.exe smudge < smoketest_output1.sql > smoketest_output2.db

        REM Step 3: Database -> SQL (clean again)
        bin\gitsqlite-windows-amd64.exe clean < smoketest_output2.db > smoketest_output2.sql

    - name: Evaluate test results
      shell: pwsh
      run: ./scripts/evaluatetest.ps1

    - name: Upload SQL Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sql-artifacts-windows-amd64
        path: '*.sql'
        retention-days: 5

  cross-evaluate:
    needs: [test-ubuntu-amd64, test-windows-amd64]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Download Ubuntu SQL artifact
      uses: actions/download-artifact@v4
      with:
        name: sql-artifacts-ubuntu-amd64
        path: ubuntu_sql

    - name: Download Windows SQL artifact
      uses: actions/download-artifact@v4
      with:
        name: sql-artifacts-windows-amd64
        path: windows_sql

    - name: Run cross-platform evaluation
      shell: pwsh
      run: |
        $ubuntuFile = (Get-ChildItem ubuntu_sql/*.sql | Select-Object -First 1).FullName
        $windowsFile = (Get-ChildItem windows_sql/*.sql | Select-Object -First 1).FullName
        
        Write-Host "Comparing $ubuntuFile (Ubuntu) with $windowsFile (Windows)"
        ./scripts/evaluatetest.ps1 -File1 $ubuntuFile -File2 $windowsFile

    - name: Upload compared SQL files
      uses: actions/upload-artifact@v4
      with:
        name: cross-evaluated-sql-files
        path: |
          ubuntu_sql/*.sql
          windows_sql/*.sql
        retention-days: 5
    