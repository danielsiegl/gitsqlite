name: Create Release binaries

on:
    release:
      types: [created]
 
jobs:
    BuildAndRelease:
        runs-on: windows-latest
        timeout-minutes: 15

        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                fetch-depth: 0 # Mandatory to use the extract version from tag action
        
            - name: Extract version from tag
              id: get_version
              uses: dhkatz/get-version-action@v3.0.0

            - name: Set up Go
              uses: actions/setup-go@v3
              with:
                go-version: 1.24

            - name: Build Release Binary
              shell: pwsh
              run: |
                Write-Host "Building release binary with version: ${{ steps.get_version.outputs.version }}" -ForegroundColor Green
                
                # Get Git information for GitHub Actions context
                $gitCommit = git rev-parse HEAD
                $gitCommitShort = git rev-parse --short HEAD
                $repoUrl = "${{ github.server_url }}/${{ github.repository }}"
                $releaseTag = "${{ steps.get_version.outputs.version }}"
                $gitBranch = "$repoUrl/releases/tag/$releaseTag"
                $buildTime = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
                $version = "${{ steps.get_version.outputs.version }}-$gitCommitShort"
                
                Write-Host "Git commit: $gitCommitShort ($gitCommit)" -ForegroundColor Cyan
                Write-Host "Git branch: $gitBranch" -ForegroundColor Cyan
                Write-Host "Build time: $buildTime" -ForegroundColor Cyan
                Write-Host "Version: $version" -ForegroundColor Cyan
                
                # Build with ldflags to set version information
                $ldflags = "-X main.GitCommit=$gitCommit -X main.GitBranch=$gitBranch -X main.BuildTime=$buildTime -X main.Version=$version"
                
                Write-Host ""
                Write-Host "Building executable with GitHub Actions context..." -ForegroundColor Green
                go build -ldflags $ldflags -o gitsqlite.exe
                
                # Verify the build was successful
                if ($LASTEXITCODE -eq 0 -and (Test-Path "gitsqlite.exe")) {
                    Write-Host "✓ Build successful - gitsqlite.exe created" -ForegroundColor Green
                    Write-Host ""
                    Write-Host "Testing version output:" -ForegroundColor Yellow
                    .\gitsqlite.exe -version
                } else {
                    Write-Host "✗ Build failed - gitsqlite.exe not found" -ForegroundColor Red
                    exit 1
                }

            - name: Upload binaries to release
              uses: svenstaro/upload-release-action@2.9.0
              with:
                repo_token: ${{ secrets.GITHUB_TOKEN }}
                file: ./gitsqlite.exe
                asset_name: gitsqlite.exe
                tag: ${{ github.ref }}
                overwrite: true

